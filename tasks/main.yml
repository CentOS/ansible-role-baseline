- name: Ensuring ansible can create local facts
  file:
    path: /etc/ansible/facts.d
    state: directory

- name: Ensuring we have a place to store centos infra scripts
  file:
    path: /usr/libexec/centos
    state: directory

- name: Adding admin group
  group:
    name: admins
    state: present

- name: Adding admin user[s]
  user: 
    name: "{{ item.login_name }}" 
    state: present 
    comment: "{{ item.full_name }}" 
    shell: /bin/bash
    append: yes
    groups: admins
  with_items: "{{ admins_list }}"
  when: admins_list is defined
  loop_control:
    label: "{{ item.login_name }}"
  tags:
    - users
- name: Importing admin user[s] ssh pub keys
  authorized_key: 
    user: "{{ item.0.login_name }}" 
    key: "{{ item.1 }}"
  with_subelements:
   - "{{ admins_list }}"
   - ssh_pub_key
  when: admins_list is defined
  loop_control:
    label: "{{ item.0.login_name }}"
  tags:
    - users

- name: Giving sudo access for admin users when needed
  template: 
    src: templates/sudofile.j2 
    dest: /etc/sudoers.d/{{ item.login_name }} 
    mode: 0440 
    owner: root 
    group: root
  with_items: "{{ admins_list }}"
  loop_control:
    label: "{{ item.login_name }}"
  when: admins_list is defined and item.sudo_right
  tags:
    - users

- name: Adding CentOS Infra key
  copy: 
    src: files/RPM-GPG-KEY-CentOS-Infra 
    dest: /etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-Infra
  tags:
    - yum

- name: Configuring CentOS Infra admin repo
  template: 
    src: centos-admin.repo.j2 
    dest: /etc/yum.repos.d/centos-admin.repo
    mode: 0644
  tags:
    - yum

- name: Creating selinux custom policy drop folder
  file: 
    path: /etc/selinux/centos 
    state: directory 
    owner: root 
    group: root 
    mode: 0750

- name: Ensuring some default packages are installed
  yum: 
    name: "{{ packages_list }}" 
    state: installed

- name: Customizing motd
  template: 
    src: motd.j2 
    dest: /etc/motd 
    owner: root 
    group: root 
    mode: 0644
  tags:
    - motd

- name: Displaying colored hostname in shell
  template:
    src: "{{ item }}.j2"
    dest: "/etc/sysconfig/{{ item }}"
    mode: 0755
    owner: root
    group: root
  with_items:
    - bash-prompt-default
    - bash-prompt-xterm
  tags:
    - motd
    - prompt

- name: Ensuring tuned is installed
  yum:
    name: tuned
    state: installed
  tags:
    - tuned
- name: Ensuring tuned is started
  service:
    name: tuned
    state: started
    enabled: True
  tags:
    - tuned

- name: Ensuring correct tuned profile is configured
  template:
    src: tuned_active_profile.j2
    dest: /etc/tuned/active_profile
    mode: 0644
  register: tuned_setting_7
  when: ansible_distribution_major_version == "7" 
  tags:
    - tuned

- name: Ensuring correct tuned profile is configured (el6 version)
  template:
    src: tuned_active_profile.j2
    dest: /etc/tune-profiles/active_profile
    mode: 0644
  register: tuned_setting_6
  when: ansible_distribution_major_version == "6"
  tags:
    - tuned

- name: Reloading tuned profile if needed
  shell: "tuned-adm profile {{ tuned_profile }}"
  when: tuned_setting_6 is changed or tuned_setting_7 is changed
  tags:
    - tuned

- import_role:
    name: iptables
  tags:
    - iptables

- import_role:
    name: zabbix-agent
  when: zabbix_monitoring   
  tags:
    - monitoring

- import_role:
    name: sshd
  tags:
    - sshd
    - users

- name: Adding additional users
  user: 
    name: "{{ item.login_name }}"
    state: present 
    comment: "{{ item.full_name }}" 
    shell: /bin/bash
  with_items: "{{ local_users_list }}"
  loop_control:
    label: "{{ item.login_name }}"
  when: local_users_list is defined
  tags:
    - users

- name: Importing local users ssh pub keys
  authorized_key: 
    user: "{{ item.0.login_name }}"
    key: "{{ item.1 }}"
  with_subelements: 
    - "{{ local_users_list }}"
    - ssh_pub_key
  loop_control:
    label: "{{ item.0.login_name }}"
  when: local_users_list is defined
  tags:
    - users

- name: Giving sudo access when needed 
  template:  
    src: templates/sudofile.j2 
    dest: "/etc/sudoers.d/{{ item.login_name }}" 
    mode: 0440 
    owner: root 
    group: root
  with_items: "{{ local_users_list }}"
  when: 
    - local_users_list is defined
    - item.sudo_right 
  loop_control:
    label: "{{ item.login_name }}"
  tags:
    - users

- name: UTC everywhere
  timezone:
    name: UTC
  tags:
    - tz

- include_tasks: chrony.yml
  tags:
    - chrony
    - time

- include_tasks: os_updates.yml
  tags:
    - yum
    - updates

- name: Importing TLS CA that we want to trust (if any)
  copy:
    src: "{{ pkistore }}/{{ item }}"
    dest: "/etc/pki/ca-trust/source/anchors"
  notify: update_ca_trust
  with_items: "{{ pki_trusted_ca_list }}"
  tags:
    - pki

- name: Distributing specific files not coming from roles/templates
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: "{{ item.owner }}"
    mode: "{{ item.mode }}"
  with_items: "{{ baseline_distributed_files }}"
  loop_control:
    label: "{{ item.dest }}"
  tags:
    - distributed_files

- name: Enabling specific selinux booleans / per host level
  seboolean:
    name: "{{ item }}"
    state: yes
    persistent: yes
  with_items: "{{ local_selinux_booleans }}"  
  tags:
    - selinux

- name: Enabling specific host/group cron jobs
  cron:
    name: "{{ item.name }}"
    job: "{{ item.job }}"
    user: "{{ item.user|default('root') }}"
    hour: "{{ item.hour|default('*') }}"
    day: "{{ item.day|default('*') }}"
    minute: "{{ item.minute|default('*') }}"
  with_items: "{{ local_cron_entries }}"
  loop_control:
    label: "{{ item.name }}"
  tags:
    - cron

 
